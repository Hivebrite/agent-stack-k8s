agents:
  queue: kubernetes
steps:
  - name: ":go::broom: tidy"
    plugins:
    - kubernetes:
        podSpec:
          containers:
          - image: golang:1.20.2-alpine
            command: [.buildkite/steps/tidy.sh]

  - name: ":go::lint-roller: lint"
    plugins:
    - kubernetes:
        podSpec:
          containers:
          - image: golangci/golangci-lint:v1.51.1
            command:
            - golangci-lint
            args:
            - run
            - ./...
            resources:
              requests:
                cpu: 1000m
                memory: 1Gi

  - name: ":golang::robot_face: check code generation"
    key: check-code-generation
    plugins:
      - kubernetes:
          podSpec:
            containers:
              - name: docker
                image: golang:alpine
                command: [.buildkite/steps/check-code-generation.sh]


  - label: ":docker::buildkite: choose agent image"
    key: agent
    plugins:
      - kubernetes:
          podSpec:
            containers:
              - name: docker
                image: alpine:latest
                command: [.buildkite/steps/agent.sh]

  - label: ":buildkite: unit tests"
    key: unit
    artifact_paths: junit-*.xml
    plugins:
      - kubernetes:
          podSpec:
            containers:
              - name: tests
                image: golang:latest
                command: [.buildkite/steps/unit_tests.sh]
      - test-collector:
          files: "junit-*.xml"
          format: "junit"

  - label: ":buildkite: integration tests"
    key: integration
    depends_on: agent
    artifact_paths: junit-*.xml
    plugins:
      - kubernetes:
          podSpec:
            serviceAccountName: integration-tests
            volumes:
            - name: agent-stack-k8s-config
              configMap:
                name: agent-stack-k8s-config
            containers:
              - name: tests
                image: golang:latest
                command: [.buildkite/steps/tests.sh]
                env:
                - name: CONFIG
                  value: /etc/config.yaml
                envFrom:
                - secretRef:
                    name: test-secrets
                - secretRef:
                    name: agent-stack-k8s-secrets
                volumeMounts:
                - mountPath: /etc/config.yaml
                  name: agent-stack-k8s-config
                  subPath: config.yaml
                resources:
                  requests:
                    cpu: 1000m
                    memory: 512Mi
      - test-collector:
          files: "junit-*.xml"
          format: "junit"

  - label: ":docker: build controller"
    key: controller
    plugins:
      - kubernetes:
          podSpec:
            containers:
              - name: ko
                image: golang:latest
                command: [.buildkite/steps/controller.sh]
                envFrom:
                - secretRef:
                    name: deploy-secrets

  - label: ":helm::docker: push helm chart"
    depends_on:
    - agent
    - controller
    env:
      BUILDKITE_GIT_FETCH_FLAGS: "-v --tags"
    plugins:
      - kubernetes:
          podSpec:
            serviceAccountName: deploy
            containers:
              - name: deploy
                image: alpine:latest
                command: [.buildkite/steps/build_and_push.sh]
                env:
                - name: BUILDKITE_SHELL
                  value: /bin/sh -ec
                envFrom:
                - secretRef:
                    name: deploy-secrets

  - label: ":shipit: deploy"
    if: "build.branch == pipeline.default_branch"
    depends_on:
    - agent
    - controller
    - integration
    env:
      BUILDKITE_GIT_FETCH_FLAGS: "-v --tags"
    plugins:
      - kubernetes:
          podSpec:
            serviceAccountName: deploy
            containers:
              - name: deploy
                image: alpine:latest
                command: [.buildkite/steps/deploy.sh]
                env:
                - name: BUILDKITE_SHELL
                  value: /bin/sh -ec
                envFrom:
                - secretRef:
                    name: deploy-secrets
                - secretRef:
                    name: agent-stack-k8s-secrets
